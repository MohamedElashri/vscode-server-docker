name: Build and push Docker image

on:
  schedule:
    # every day at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Fetch latest VSCode release
        id: fetch_vscode
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latest = await github.rest.repos.getLatestRelease({
              owner: 'microsoft',
              repo: 'vscode'
            });
            core.setOutput('version', latest.data.tag_name);

      - name: Determine version to build
        id: set_version
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "push" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.fetch_vscode.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ steps.set_version.outputs.version }}';
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              core.setOutput('exists', 'true');
            } catch (error) {
              if (error.status === 404) {
                core.setOutput('exists', 'false');
              } else {
                throw error;
              }
            }

      - name: Create GitHub release for VSCode ${{ steps.set_version.outputs.version }}
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.set_version.outputs.version }}
          release_name: VSCode ${{ steps.set_version.outputs.version }}
          body: Automated release for VSCode version ${{ steps.set_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            melashri/vscode-server:${{ steps.set_version.outputs.version }}
            melashri/vscode-server:latest
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          build-args: |
            USER=vscode
            USER_ID=1000
            GROUP_ID=1000

      - name: Debug (on failure)
        if: failure()
        run: |
          docker build --no-cache -t debug-image .
          docker run --rm debug-image id
          docker run --rm debug-image cat /etc/passwd
          docker run --rm debug-image cat /etc/group